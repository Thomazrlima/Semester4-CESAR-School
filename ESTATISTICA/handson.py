# -*- coding: utf-8 -*-
"""HandsOn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bj4tMCZ-coutS18iI2ghInEw6qTAnQ8C

Aquecendo os motores
"""

print ("hello world")

print ("Ferrari é o carro mais top da galáxia")

"""Criando um vetor/array de 1 dimensão"""

import pandas as pd #chamando a biblioteca pandas
s = pd.Series(data = [3,-5,7,4], index = ['a','b','c','d']) #associando um índice ao respectio número da matriz
s

r = pd.Series(data= [5,10,20,30,50])
r

t = pd.Series(data= [-5,10999,2055,30,50])
t

import pandas as pd
import numpy as np
data = {'pais': ['bélgica', 'índia', 'brasil'], 'capital': ['bruxelas', 'nova delhi', 'brasília'], 'população': ['12345', '123456789', '1234567']}
df = pd.DataFrame(data, columns=['pais', 'capital', 'população'])
df

"""DataFrame"""

np.random.seed(30) #gerador de números aleatórios #a função seed faz com que os números aleatórios com uma sequência definida
df = pd.DataFrame(np.random.randn(9,9), index='A B C D E F G H I'.split(), columns = 'R S T U V W X Y Z'.split())
df

df['W']

df ['X']

df ['Y']

type (df['W']) #descobrindo o tipo do objeto

type(df)

df[['W', 'Z']]

df[['W', 'Z', 'X']]

df['nova'] = df['W']+df['Z'] #somando os valores de duas colunas
df #gerando um novo DataFrame

df.drop('nova', axis=1) #apagando uma coluna com o comando drop

"""ENCONTRANDO ELEMENTOS PELO ÍNDICE"""

df.loc['A', 'W'] #usando o comando loc para encontrar elementos

df.loc['A']

df.iloc[0,0]

df.iloc[1:4,1:3] #método numpy

df.drop('nova', axis=1, inplace = True) #o inplace garante que o drop apague e as alterações sejam salvas no df
df

"""SELEÇÃO CONDICIONAL"""

df > 0

val = df > 0
df[val]

df[df>0].count().sum() #comando de contagem de valor não nulos em todas as colunas

df.reset_index()

coluna = 'PE PB AL SE SP'.split()
df['Estado'] = coluna
df

"""DADOS AUSENTES"""

import numpy as np #importando numpy e criando novo dataframe
dic = {'A': [1,2, np.nan], 'B':[5, np.nan,np.nan], 'C': [9,10,11]}
dic

import pandas as pd
import numpy as np
data = pd.DataFrame(dic)
data

data.dropna() #apaga valores ausentes

data.fillna(value =0) #preenche com 0 os valores ausentes

data['A'].fillna(value = data['A'].mean()) #preenche o valor ausente com a média dos valores da coluna

data.fillna(method = 'ffill') #ffill preenche os valores ausentes com o último valor válido

"""GROUPBY"""

dados = {'Empresa':['Empresa 1', 'Empresa 2','Empresa 2', 'Empresa 3', 'Empresa 1', 'Empresa 3' ],
       'Nome':['Vendedor 1', 'Vendedor 2','Vendedor 3', 'Vendedor 4', 'Vendedor 5', 'Vendedor 6'],
       'Venda': [200, 320, 140, 125, 900,1200 ]}

import pandas as pd
df = pd.DataFrame(dados)
df

group = df.groupby('Empresa') #tipo do arquivo
group

group.sum() #retorna a soma de vendas de cada empresa (junta as vendas de cada vendedor)

group.mean()

group.describe()

grupo = df.groupby('Nome') #acessa índices específicos do dataframe

grupo.sum()

group.sum()

grupo.sum().loc['Vendedor 1'] #localiza os dados do vendedor 1

"""CONCATENAR

Unir dois ou mais dataframes
"""

df1 = pd.DataFrame({'A':['A0','A1', 'A2', 'A3'], 'B':['B0','B1', 'B2', 'B3'], 'C':['C0','C1', 'C2', 'C3'], 'D':['D0','D1', 'D2', 'D3']}, index=[0,1,2,3])
df1

df2 = pd.DataFrame({'A':['A4','A5', 'A6', 'A7'],
                   'B':['B4','B5', 'B6', 'B7'],
                   'C':['C4','C5', 'C6', 'C7'],
                   'D':['D4','D5', 'D6', 'D7']},
                  index=[4,5,6,7])
df2

df3 = pd.DataFrame({'A':['A8','A9', 'A10', 'A11'],
                   'B':['B8','B9', 'B10', 'B11'],
                   'C':['C8','C9', 'C10', 'C11'],
                   'D':['D8','D9', 'D10', 'D11']},
                  index=[8,9,10,11])
df3

pd.concat([df1, df2, df3]) #concatena os dataframes chamados

"""MESCLAR"""

esquerda = pd.DataFrame({'key':['K0','K1', 'K2', 'K3'],
                   'A':['A0','A1', 'A2', 'A3'],
                   'B':['B0','B1', 'B2', 'B3']})
direita = pd.DataFrame({'key':['K0','K1', 'K2', 'K3'],
                   'C':['C0','C1', 'C2', 'C3'],
                   'D':['D0','D1', 'D2', 'D3']})

esquerda

direita

pd.merge(direita, esquerda, on= 'key')

"""IMPORTAR O DATASET"""

from google.colab import files #comando para importar arquivos no colab
uploaded = files.upload() #comando para fazer o upload do arquivo

leitura = pd.read_csv('titanic.csv') #realiza a leitura do arquivo importado
leitura.head(10) #comando head serve para exibir as 5 primeiras linhas do dataframe #SibSp = sibling/spouse (irmão/cônjuge), parch = parent/child, fare = tarifa
#C = Cherbourg, Q = Queenstown, S = Southampton

leitura.info() #exibe informações do dataframe

leitura.describe() #SibSp = sibling/spouse (irmão/cônjuge), parch = parent/child, fare = tarifa

from google.colab import drive #comando de importação do drive

drive.mount('/content/gdrive') #serve para acessar os arquivos do drive